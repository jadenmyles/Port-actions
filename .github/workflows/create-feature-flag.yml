name: Create LaunchDarkly Feature Flag
on:
  workflow_dispatch:
    inputs:
      project_key:
        description: LaunchDarkly project key
        required: true
        type: string
      flag_key:
        description: Unique key for the feature flag
        required: true
        type: string
      flag_name:
        description: Human-readable name for the feature flag
        required: true
        type: string
      flag_description:
        description: Description of what this flag controls
        required: false
        type: string
      temporary:
        description: Whether this is a temporary flag
        required: false
        type: boolean
        default: false
      tags:
        description: Comma-separated list of tags
        required: false
        type: string
      port_context:
        required: true
        description: includes blueprint, run ID, and entity identifier from Port.

jobs:
  create-feature-flag:
    runs-on: ubuntu-latest
    steps:
      - name: Log Executing Request to Create Feature Flag
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{fromJson(inputs.port_context).run_id}}
          logMessage: "Creating feature flag in LaunchDarkly..."

      - name: Create Feature Flag
        id: create_flag
        uses: fjogeleit/http-request-action@v1
        with:
          url: 'https://app.launchdarkly.com/api/v2/flags/${{ inputs.project_key }}'
          method: 'POST'
          customHeaders: '{"Content-Type": "application/json", "Authorization": "${{ secrets.LAUNCHDARKLY_ACCESS_TOKEN }}"}'
          data: >-
            {
              "key": "${{ inputs.flag_key }}",
              "name": "${{ inputs.flag_name }}",
              "description": "${{ inputs.flag_description }}",
              "temporary": ${{ inputs.temporary }},
              "tags": "${{ inputs.tags }}".split(",").map(tag => tag.trim()).filter(tag => tag !== "")
            }

      - name: Log Create Feature Flag Request Failure 
        if: failure()
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{fromJson(inputs.port_context).run_id}}
          logMessage: "Request to create feature flag failed"

      - name: UPSERT Entity
        uses: port-labs/port-github-action@v1
        with:
          identifier: "${{ fromJson(steps.create_flag.outputs.response).key }}"
          title: "${{ fromJson(steps.create_flag.outputs.response).name }}"
          blueprint: ${{fromJson(inputs.port_context).blueprint}}
          properties: |-
            {
              "kind": "${{ fromJson(steps.create_flag.outputs.response).kind }}",
              "description": "${{ fromJson(steps.create_flag.outputs.response).description }}",
              "creationDate": "${{ fromJson(steps.create_flag.outputs.response).creationDate }}",
              "clientSideAvailability": ${{ toJson(fromJson(steps.create_flag.outputs.response).clientSideAvailability) }},
              "temporary": ${{ fromJson(steps.create_flag.outputs.response).temporary }},
              "tags": ${{ toJson(fromJson(steps.create_flag.outputs.response).tags) }},
              "maintainer": "${{ fromJson(steps.create_flag.outputs.response).maintainer }}",
              "customProperties": ${{ toJson(fromJson(steps.create_flag.outputs.response).customProperties) }},
              "archived": ${{ fromJson(steps.create_flag.outputs.response).archived }},
              "deprecated": ${{ fromJson(steps.create_flag.outputs.response).deprecated }},
              "variations": ${{ toJson(fromJson(steps.create_flag.outputs.response).variations) }}
            }
          relations: |-
            {
              "project": "${{ inputs.project_key }}"
            }
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: UPSERT
          runId: ${{fromJson(inputs.port_context).run_id}}

      - name: Log After Upserting Entity
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{fromJson(inputs.port_context).run_id}}
          logMessage: "Feature flag created successfully âœ…"
