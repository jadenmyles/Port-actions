name: Delete ECS Service

on:
  workflow_dispatch:
    inputs:
      confirmation:
        description: 'Type DELETE to confirm service deletion'
        required: true
        type: string
      port_context:
        required: true
        description: 'Action and general context (blueprint, run id, etc...)'
        type: string

jobs:
  delete-ecs-service:
    runs-on: ubuntu-latest
    steps:
      - name: Validate confirmation
        run: |
          if [ "${{ github.event.inputs.confirmation }}" != "DELETE" ]; then
            echo "‚ùå Confirmation failed. You must type 'DELETE' exactly to proceed."
            exit 1
          fi
          echo "‚úÖ Confirmation validated"

      - name: Inform Port about workflow start
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{fromJson(inputs.port_context).runId}}
          logMessage: ‚ö†Ô∏è Initiating ECS service deletion

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Get service information
        id: service-info
        run: |
          CLUSTER_NAME="${{ fromJson(inputs.port_context).entity.relations.cluster }}"
          SERVICE_ARN="${{ fromJson(inputs.port_context).entity.identifier }}"
          
          echo "üîç Getting service information..."
          
          # Get service details before deletion
          SERVICE_NAME=$(aws ecs describe-services \
            --cluster "$CLUSTER_NAME" \
            --services "$SERVICE_ARN" \
            --query 'services[0].serviceName' \
            --output text)
          
          DESIRED_COUNT=$(aws ecs describe-services \
            --cluster "$CLUSTER_NAME" \
            --services "$SERVICE_ARN" \
            --query 'services[0].desiredCount' \
            --output text)
          
          RUNNING_COUNT=$(aws ecs describe-services \
            --cluster "$CLUSTER_NAME" \
            --services "$SERVICE_ARN" \
            --query 'services[0].runningCount' \
            --output text)
          
          TASK_DEFINITION=$(aws ecs describe-services \
            --cluster "$CLUSTER_NAME" \
            --services "$SERVICE_ARN" \
            --query 'services[0].taskDefinition' \
            --output text)
          
          echo "service_name=$SERVICE_NAME" >> $GITHUB_OUTPUT
          echo "desired_count=$DESIRED_COUNT" >> $GITHUB_OUTPUT
          echo "running_count=$RUNNING_COUNT" >> $GITHUB_OUTPUT
          echo "task_definition=$TASK_DEFINITION" >> $GITHUB_OUTPUT
          
          echo "üìã Service Details:"
          echo "  Name: $SERVICE_NAME"
          echo "  Desired Count: $DESIRED_COUNT"
          echo "  Running Count: $RUNNING_COUNT"
          echo "  Task Definition: $TASK_DEFINITION"

      - name: Scale service to zero
        run: |
          CLUSTER_NAME="${{ fromJson(inputs.port_context).entity.relations.cluster }}"
          SERVICE_ARN="${{ fromJson(inputs.port_context).entity.identifier }}"
          
          echo "‚¨áÔ∏è Scaling service to 0 tasks before deletion..."
          
          aws ecs update-service \
            --cluster "$CLUSTER_NAME" \
            --service "$SERVICE_ARN" \
            --desired-count 0
          
          echo "‚úÖ Service scaled to 0 tasks"

      - name: Wait for tasks to stop
        run: |
          CLUSTER_NAME="${{ fromJson(inputs.port_context).entity.relations.cluster }}"
          SERVICE_ARN="${{ fromJson(inputs.port_context).entity.identifier }}"
          
          echo "‚è≥ Waiting for all tasks to stop..."
          
          # Wait for service to become stable with 0 running tasks
          aws ecs wait services-stable \
            --cluster "$CLUSTER_NAME" \
            --services "$SERVICE_ARN"
          
          # Verify no tasks are running
          RUNNING_COUNT=$(aws ecs describe-services \
            --cluster "$CLUSTER_NAME" \
            --services "$SERVICE_ARN" \
            --query 'services[0].runningCount' \
            --output text)
          
          if [ "$RUNNING_COUNT" -eq 0 ]; then
            echo "‚úÖ All tasks have stopped"
          else
            echo "‚ö†Ô∏è Warning: $RUNNING_COUNT tasks still running"
          fi

      - name: Delete the service
        run: |
          CLUSTER_NAME="${{ fromJson(inputs.port_context).entity.relations.cluster }}"
          SERVICE_ARN="${{ fromJson(inputs.port_context).entity.identifier }}"
          
          echo "üóëÔ∏è Deleting ECS service..."
          
          aws ecs delete-service \
            --cluster "$CLUSTER_NAME" \
            --service "$SERVICE_ARN" \
            --force
          
          echo "‚úÖ Service deletion initiated"

      - name: Wait for service deletion
        run: |
          CLUSTER_NAME="${{ fromJson(inputs.port_context).entity.relations.cluster }}"
          SERVICE_ARN="${{ fromJson(inputs.port_context).entity.identifier }}"
          
          echo "‚è≥ Waiting for service deletion to complete..."
          
          # Wait for service to be deleted (this can take a few minutes)
          aws ecs wait services-inactive \
            --cluster "$CLUSTER_NAME" \
            --services "$SERVICE_ARN"
          
          echo "‚úÖ Service successfully deleted"

      - name: Verify deletion
        run: |
          CLUSTER_NAME="${{ fromJson(inputs.port_context).entity.relations.cluster }}"
          SERVICE_ARN="${{ fromJson(inputs.port_context).entity.identifier }}"
          
          echo "üîç Verifying service deletion..."
          
          # Check if service still exists
          SERVICE_STATUS=$(aws ecs describe-services \
            --cluster "$CLUSTER_NAME" \
            --services "$SERVICE_ARN" \
            --query 'services[0].status' \
            --output text 2>/dev/null || echo "NOT_FOUND")
          
          if [ "$SERVICE_STATUS" = "INACTIVE" ] || [ "$SERVICE_STATUS" = "NOT_FOUND" ]; then
            echo "‚úÖ Service deletion verified"
          else
            echo "‚ùå Service deletion verification failed. Status: $SERVICE_STATUS"
            exit 1
          fi

      - name: Delete Port entity
        run: |
          SERVICE_ARN="${{ fromJson(inputs.port_context).entity.identifier }}"
          
          echo "üóëÔ∏è Deleting corresponding Port entity..."
          
          curl -X DELETE \
            -H "Authorization: Bearer $(curl -X POST \
              -H "Content-Type: application/json" \
              -d '{"clientId": "${{ secrets.PORT_CLIENT_ID }}", "clientSecret": "${{ secrets.PORT_CLIENT_SECRET }}"}' \
              https://api.getport.io/v1/auth/access_token | jq -r '.accessToken')" \
            "https://api.getport.io/v1/blueprints/awsEcsService/entities/$(echo '$SERVICE_ARN' | sed 's/[\/:]/%2F/g')"
          
          echo "‚úÖ Port entity deletion requested"

      - name: Inform Port about successful deletion
        if: success()
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          status: 'SUCCESS'
          runId: ${{fromJson(inputs.port_context).runId}}
          logMessage: |
            ‚úÖ ECS Service Successfully Deleted
            Service: ${{ steps.service-info.outputs.service_name }}
            Previous Desired Count: ${{ steps.service-info.outputs.desired_count }}
            Task Definition: ${{ steps.service-info.outputs.task_definition }}

      - name: Inform Port about failed deletion
        if: failure()
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          status: 'FAILURE'
          runId: ${{fromJson(inputs.port_context).runId}}
          logMessage: ‚ùå Failed to delete ECS service ${{ fromJson(inputs.port_context).entity.identifier }}
